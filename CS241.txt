CS 241 Machine Problem Instructions
CS 241, Spring 2010

===============================================================================
1) ORGANIZATION OF FILES

This file is one of two files associated with machine problems in CS 241. This
file describes how to submit your MP, grading details, and other details that
are shared between all MPs in CS 241. The README.txt file describes specific
details about each MP.


===============================================================================
2) TESTING YOUR PROGRAM

In CS 241, your program will only be run by course staff on CSIL Linux Terminal
Servers (TS). The addresses for these computers are:

  csil-linux-ts1.cs.uiuc.edu
  csil-linux-ts2.cs.uiuc.edu

You may access these boxes via SSH using any program that understands the
SSH protocol (ex: `ssh` on Mac/Linux, `putty` on Windows).

It's important to note that these machines are 64-bit machines with a 64-bit
operating system. This significantly differs from DCL machines and other CSIL
machines that run 32-bit operating systems.

Since all testing and grading by course staff will be done on the TS machines,
it is STRONGLY ADVISED that you test your program on TS machines before
submission. The fact that your program "runs perfectly" on a DCL machine
will get you zero points if your program does not run at all on CSIL machines.


===============================================================================
3) GRADING YOUR PROGRAM

As discussed on the first day of class and on the course website, MPs will
make up 30% of the total course grade. Each MP will make up a part of that
grade, with long (2-week) MPs being assigned a heavier weight than short MPs.

The grading of each MP will be broken up into four different categories.

  Standard Machine Problem Correctness (65%)
     For each MP, the course staff will run automated tests by our autograder
     on every file that has been submitted by the due date. This autograder
     will have a number of different tests, each assigned with a weight
     based on its importance, and your grade will be simply be the result
     of your total score by the autograder.

     As soon as your program is autograded, an autograder report will
     be placed inside your subversion directory for CS 241. This report will
     explain how your program was tested, what output your program gave,
     and if that output was correct or not.

     Due to the large size of this class, the only way to ensure fairness
     across all students is to use the same autograder for every student
     and for no exceptions to be made. If you believe that your program
     works completely correct, it may be an error in the autograder. For
     errors in the autograder, we will correct the autograder and re-run
     the autograder on every student's submission. However, if the error
     is in your code -- even if it's a minor error that results in a large
     point drop -- exceptions will not be made since we are unable to
     examine the errors of every single submission.

 Grades may change
     as the autograder is rerun with corrections. This
 may result in your
     MP report grade changing. Until grades are posted
 on Compass, they
     should not be considered final and may still go up
 or down based on
     your program's correctness.



  Memory Management (15%)
     Unlike higher level programming languages such as Java and C#, there
     is no garbage collector in C. Instead, every single bit of memory
     that you allocate in a C program remains allocated to your program
     until your program frees that memory -- even if there doesn't exist
     a pointer to that memory because you've cleared it or because it has
     gone out of scope.

     We will use both manual inspection of your program and the use of
     a common C dynamic analysis tool called `valgrind`. You can run
     valgrind on your own program by running the following line of
     code:

        %> valgrind myprog arg1 arg2 ...

     To receive full credit for this portion of the grading:

       (1): Your program must be reported at "leak free" by valgrind

            by displaying the following text in its valgrind report:

                 "All heap blocks were freed -- no leaks are possible."



       (2): Your program must perform tasks in a reasonable amount
            of memory. You may lose points if you complete a task

            by simply allocating a *large* amount of memory for
            a task that requires only a small amount of memory.



            For example, if you need to program a dictionary to
 
            store key/value pairs. Using an array[1000000] may work,

            but hardly manages memory well (or works for more than
            one million entries).


     Finally, if your program does not complete significant parts of
     the MP, you may not be awarded full points for memory management.
     For example, some MPs may require you to open/read/write a large
     number of files. If you never use open()/fopen() because you
     didn't complete that part of the MP, you will not receive memory
     points for correctly close()'ing your files.


  Strictly Correct Memory Usage (15%)

     In the last 15%, the grading looked at if you correctly free'd the
     memory you allocated in your program. In this 15%, the grading looks
     at if you didn't write into memory you didn't allocate.

     Using the same valgrind tool, you will receive full credit for this
     portion of the grading if and only if your valgrind report shows:
         "ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 4 from 1)"

     If the error summary does not report 0 errors, valgrind will have
     displayed other error information above the error summary giving
     you details of where the illegal access occurred.  For example:

         Invalid write of size 2
             at 0x400519: main (in /home/cs/wfagen2/temp/mystring)
           Address 0x4C37039 is 9 bytes inside a block of size 10 alloc'd
             at 0x4A05809: malloc (vg_replace_malloc.c:149)
             by 0x4004A9: main (in /home/cs/wfagen2/temp/mystring)

     is generated by a strcat() past the end of a memory region.


  Comments / Readability (5%)
     In the 'real world', it's somewhat uncommon for programs to get
     written once and never touched again. Therefore, it's important
     that your code is both readable and your logic is easy to understand
     through the use of comments.

     The goal isn't to include a comment on every line of code. In fact,
     a piece of code that has every single line commented can often be
     useless as we know that printf() will print a line of text to the
     screen. Unless that printf() is interesting, a comment is probably
     not necessary.

     The course staff will manually open up every submission and examine
     it for comments and readability.


As with course policy on all assignments, you will have one week after
your grade has been posted to make any regrade requests. All regrade 
requests will be done offline and should be submitted by e-mail to:

  cs241help-sp10@cs.uiuc.edu

We will confirm that we have received your e-mail and we will e-mail
you back when the regrade has been done. Please use your @illinois.edu
address when e-mailing us.

If you choose to come into office hours, we can look at your program
and work with you to try and find and help you understand what was wrong
with it. However, even if we are unable to find anything wrong in office
hours, the regrade will still be done offline and no points will be
awarded to you in office hours. This ensures that there is a single,
fair, and universal grading scheme across all students. In fact, it's often
the case that we will have you e-mail us regarding the regrade even
if you have come into office hours.


===============================================================================
4) SUBMISSION

All MP submissions will be done via subversion (svn). Subversion is a simple
version control system that is used in nearly all open source projects today.
If you haven't used svn yet, you will be using it for a number of different
CS classes here at Illinois.

The URL to the CS 241 svn is:
   https://csil-projects.cs.uiuc.edu/svn/sp10/cs241/

If you have never used svn before, there are step-by-step instructions on
the course website on how to get svn up and running for you.

Inside the svn, you'll find that directories will be created for you when
MPs are released. These directories will simply be the name of that MP
(eg: mp1, mp2, mp3, etc). Those directories are where we will pre-upload
a fresh copy of the MP. You must edit/replace those files and submit them
to the svn server for your MP to be graded.

Please note that SVN is the only way to submit MPs. Your MP _WILL NOT_ get
graded if you e-mail it to us, if you upload it somewhere on Compass,
or if you place it somewhere else. You should always check that the
correct version of your file is uploaded before the due date by going
to the svn web interface by going to:
   https://csil-projects.cs.uiuc.edu/svn/sp10/cs241/

Please note the late policy on the course website, as it applies to submission
on svn. Do not submit a new copy of your program after the deadline unless
you want that copy graded, with the late policy applied based on the time
of your last submission.


===============================================================================
5) TEAM MACHINE PROBLEM SUBMISSION

In this class, from time to time you may be allowed to program with a partner
or in a team. When you submit a team MP, it is only necessary for one member
of your team to submit the MP.

However, to let us know who you worked with, please make sure to fill out
TEAM.txt. Instructions to fill out TEAM.txt is provided as comments inside
TEAM.txt.  If you choose to work alone on the team MP, it is not necessary
to fill out the TEAM.txt file.
